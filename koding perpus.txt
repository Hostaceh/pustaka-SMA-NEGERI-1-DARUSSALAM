<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kartu Pustaka Digital - Login</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Inter', sans-serif; }
        .card-shadow { box-shadow: 0 10px 25px rgba(0,0,0,0.1); }
        .gradient-bg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .login-bg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .print-card { 
            width: 350px !important; 
            height: 220px !important; 
            background: white !important;
            border-radius: 12px !important;
            overflow: hidden !important;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
        }
        .card-header-print {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
            color: white !important;
            padding: 16px !important;
            height: 64px !important;
        }
        .card-body-print {
            padding: 16px !important;
            height: 156px !important;
        }
    </style>
</head>
<body class="min-h-screen bg-gray-100">
    <!-- Login Screen -->
    <div id="loginScreen" class="min-h-screen login-bg flex items-center justify-center p-4">
        <div class="bg-white rounded-xl card-shadow p-8 w-full max-w-md">
            <div class="text-center mb-8">
                <div class="text-4xl mb-4">📚</div>
                <h1 class="text-2xl font-bold text-gray-800 mb-2">Kartu Pustaka Digital</h1>
                <p class="text-gray-600">Silakan login untuk melanjutkan</p>
            </div>

            <form id="loginForm" class="space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Pilih Tipe User:</label>
                    <select id="userType" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        <option value="">Pilih tipe user...</option>
                        <option value="admin">👨‍💼 Admin</option>
                        <option value="siswa">👨‍🎓 Siswa</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Username:</label>
                    <input type="text" id="username" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Masukkan username...">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Password:</label>
                    <input type="password" id="password" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Masukkan password...">
                </div>

                <button type="submit" id="loginBtn" class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium">
                    🔐 Login
                </button>
            </form>

            <div id="loginError" class="mt-4 p-3 bg-red-100 border border-red-300 text-red-700 rounded-lg hidden">
                <p class="text-sm"></p>
            </div>

            <div id="loginLoading" class="mt-4 p-3 bg-blue-100 border border-blue-300 text-blue-700 rounded-lg hidden">
                <p class="text-sm">🔄 Memverifikasi login...</p>
            </div>


        </div>
    </div>

    <!-- Main Application -->
    <div id="mainApp" class="hidden">
        <div class="max-w-4xl mx-auto p-4">
            <!-- Header -->
            <div class="text-center mb-8">
                <div class="flex justify-between items-center mb-4">
                    <div></div>
                    <div class="text-center">
                        <h1 class="text-3xl font-bold text-gray-800 mb-2">Kartu Pustaka Digital</h1>
                        <p class="text-gray-600">Sistem Manajemen Anggota Perpustakaan</p>
                    </div>
                    <div class="flex items-center gap-4">
                        <div class="text-right">
                            <p class="text-sm text-gray-600">Login sebagai:</p>
                            <p id="currentUser" class="font-semibold text-gray-800"></p>
                        </div>
                        <button id="logoutBtn" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors text-sm">
                            🚪 Logout
                        </button>
                    </div>
                </div>
            </div>

            <!-- Controls -->
            <div class="bg-white rounded-lg card-shadow p-6 mb-6">
                <div class="flex flex-col gap-4">
                    <!-- Download Path Setting (Admin Only) -->
                    <div id="adminControls" class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <label class="block text-sm font-medium text-blue-800 mb-2">📁 Folder Unduhan:</label>
                        <div class="flex items-center gap-2">
                            <input type="text" id="downloadPath" value="\\DESKTOP-MUSA\Users\USER A\Downloads\download kartu" 
                                   class="flex-1 px-3 py-2 text-sm border border-blue-300 rounded-lg bg-white focus:ring-2 focus:ring-blue-500 focus:border-transparent" 
                                   placeholder="Masukkan path folder unduhan...">
                            <button id="setPathBtn" class="px-3 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors">
                                💾 Set Path
                            </button>
                        </div>
                        <p class="text-xs text-blue-600 mt-1">💡 Catatan: Browser akan mengunduh ke folder Downloads default, tapi nama file akan disesuaikan</p>
                    </div>
                    
                    <!-- Member Selection and Actions -->
                    <div class="flex flex-col md:flex-row gap-4 items-center">
                        <div class="flex-1">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Pilih Anggota:</label>
                            <select id="memberSelect" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="">Memuat data...</option>
                            </select>
                        </div>
                        <div class="flex gap-2">
                            <button id="refreshBtn" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                                🔄 Refresh Data
                            </button>
                            <button id="printBtn" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                                📄 Cetak PDF
                            </button>
                            <button id="printAllBtn" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
                                📚 Cetak Semua
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Library Card -->
            <div id="libraryCard" class="bg-white rounded-xl card-shadow overflow-hidden mb-6" style="width: 350px; height: 220px; margin: 0 auto;">
                <!-- Card Header -->
                <div class="gradient-bg text-white p-4 h-16">
                    <div class="flex items-center justify-between">
                        <div>
                            <h2 class="text-lg font-bold">PERPUSTAKAAN</h2>
                            <p class="text-xs opacity-90">SMA NEGERI 1 DARUSSALAM</p>
                            <p class="text-xs opacity-80">Library Card</p>
                        </div>
                        <div class="text-2xl">📚</div>
                    </div>
                </div>

                <!-- Card Body -->
                <div class="p-4 h-40">
                    <div class="flex h-full">
                        <!-- Left Side - Member Info -->
                        <div class="flex-1 pr-3">
                            <div class="mb-2">
                                <p class="text-xs text-gray-500 uppercase tracking-wide">Nama</p>
                                <p id="memberName" class="font-semibold text-gray-800 text-sm">-</p>
                            </div>
                            <div class="mb-2">
                                <p class="text-xs text-gray-500 uppercase tracking-wide">ID Anggota</p>
                                <p id="memberId" class="font-mono text-sm text-gray-800">-</p>
                            </div>
                            <div class="mb-2">
                                <p class="text-xs text-gray-500 uppercase tracking-wide">Kelas</p>
                                <p id="memberClass" class="text-sm text-gray-800">-</p>
                            </div>
                            <div>
                                <p class="text-xs text-gray-500 uppercase tracking-wide">Berlaku Hingga</p>
                                <p id="expiryDate" class="text-sm text-gray-800">-</p>
                            </div>
                        </div>

                        <!-- Right Side - Barcode -->
                        <div class="w-24 flex flex-col items-center justify-center">
                            <svg id="barcode" class="mb-1"></svg>
                            <p class="text-xs text-gray-500 text-center">Scan untuk akses</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Data Table -->
            <div class="bg-white rounded-lg card-shadow overflow-hidden">
                <div class="p-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-800">Data Anggota Perpustakaan</h3>
                </div>
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead id="tableHeader" class="bg-gray-50">
                            <tr>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nama</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Kelas</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            </tr>
                        </thead>
                        <tbody id="dataTable" class="bg-white divide-y divide-gray-200">
                            <tr>
                                <td colspan="5" class="px-4 py-8 text-center text-gray-500">Memuat data...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        let membersData = [];
        let downloadPath = '\\\\DESKTOP-MUSA\\Users\\USER A\\Downloads\\download kartu';
        let currentUserData = null;
        let userType = null;

        // URLs for authentication
        const adminAuthUrl = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQ5Wy84tUN6tQbgf1IHhMeuqyjJbtX2_oXaIHQdU5ZD_EodxLCH7Hi_OXy4kL2bAS2YRzdLQjsoWndG/pub?output=csv';
        const siswaAuthUrl = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRcqZe8z1fnAkxXc5kkvsf0oWwSJ1K8Q7UY40cG__di6cNr8FmhAqHgDXZDDjRRmB52lpvZuAyHTtsf/pub?output=csv';
        
        // Original members data URL
        const csvUrl = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRsfQphSi9AGYX-FedosHVjOAob8lXRos7ZF6BPxiskZPRxJ9Lqrw1a_6gM-O00u_zk5BPr41T79ASH/pub?gid=0&single=true&output=csv';
        
        // Print log URL
        const printLogUrl = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSFqUYPl8JXTTr0wcISGjgaBWMZXxHIRC1hfPZt6mJMX4cWLqpX1B6r0U8GLmzGD7sGr33e0XNC790h/pub?output=csv';

        // Parse CSV data
        function parseCSV(csv) {
            const lines = csv.split('\n');
            const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
            const data = [];

            for (let i = 1; i < lines.length; i++) {
                if (lines[i].trim()) {
                    const values = lines[i].split(',').map(v => v.trim().replace(/"/g, ''));
                    const row = {};
                    headers.forEach((header, index) => {
                        row[header] = values[index] || '';
                    });
                    data.push(row);
                }
            }
            return data;
        }

        // Log print activity
        async function logPrintActivity(memberName, memberId, printType = 'single') {
            try {
                const currentUser = currentUserData.nama || currentUserData.Nama || currentUserData.name || currentUserData.Name || 'Unknown';
                const timestamp = new Date().toLocaleString('id-ID');
                
                // Create log entry
                const logData = {
                    timestamp: timestamp,
                    user: currentUser,
                    userType: userType,
                    memberName: memberName,
                    memberId: memberId,
                    printType: printType,
                    status: 'success'
                };
                
                console.log('📝 Print activity logged:', logData);
                
                // In a real implementation, you would send this to Google Sheets via Apps Script
                // For now, we'll just log it to console and show a notification
                
                return true;
            } catch (error) {
                console.error('Error logging print activity:', error);
                return false;
            }
        }

        // Authentication function
        async function authenticateUser(username, password, type) {
            try {
                const authUrl = type === 'admin' ? adminAuthUrl : siswaAuthUrl;
                console.log('🔍 Mengecek URL:', authUrl);
                
                const response = await fetch(authUrl);
                const csvData = await response.text();
                console.log('📄 Data CSV diterima:', csvData.substring(0, 200) + '...');
                
                const users = parseCSV(csvData);
                console.log('👥 Jumlah user ditemukan:', users.length);
                console.log('📋 Sample user pertama:', users[0]);

                // Show all possible field names for debugging
                if (users.length > 0) {
                    console.log('🔑 Field yang tersedia:', Object.keys(users[0]));
                }

                // Find user with matching credentials - try multiple field combinations
                const user = users.find(u => {
                    // Try various field name combinations
                    const possibleUserFields = [
                        u.username, u.Username, u.user, u.User, u.nama, u.Nama, 
                        u.name, u.Name, u.email, u.Email, u.id, u.ID
                    ];
                    const possiblePassFields = [
                        u.password, u.Password, u.pass, u.Pass, u.sandi, u.Sandi,
                        u.kata_sandi, u.kataSandi
                    ];

                    // Get actual values (remove undefined)
                    const userField = possibleUserFields.find(field => field && field.trim()) || '';
                    const passField = possiblePassFields.find(field => field && field.trim()) || '';

                    console.log(`🔍 Checking user: ${userField} vs ${username}, pass: ${passField} vs ${password}`);
                    
                    return userField.toLowerCase() === username.toLowerCase() && passField === password;
                });

                console.log('✅ User found:', user ? 'Ya' : 'Tidak');
                return user;
            } catch (error) {
                console.error('Authentication error:', error);
                return null;
            }
        }

        // Show error message
        function showError(message) {
            const errorDiv = document.getElementById('loginError');
            errorDiv.querySelector('p').textContent = message;
            errorDiv.classList.remove('hidden');
            setTimeout(() => {
                errorDiv.classList.add('hidden');
            }, 5000);
        }

        // Show loading
        function showLoading(show) {
            const loadingDiv = document.getElementById('loginLoading');
            if (show) {
                loadingDiv.classList.remove('hidden');
            } else {
                loadingDiv.classList.add('hidden');
            }
        }

        // Login form handler
        document.getElementById('loginForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const username = document.getElementById('username').value.trim();
            const password = document.getElementById('password').value.trim();
            const selectedUserType = document.getElementById('userType').value;

            if (!username || !password || !selectedUserType) {
                showError('Semua field harus diisi!');
                return;
            }

            const loginBtn = document.getElementById('loginBtn');
            loginBtn.disabled = true;
            loginBtn.textContent = '🔄 Memverifikasi...';
            showLoading(true);

            try {
                const user = await authenticateUser(username, password, selectedUserType);
                
                if (user) {
                    currentUserData = user;
                    userType = selectedUserType;
                    
                    // Show main app
                    document.getElementById('loginScreen').classList.add('hidden');
                    document.getElementById('mainApp').classList.remove('hidden');
                    
                    // Update user info
                    const userName = user.nama || user.Nama || user.name || user.Name || username;
                    document.getElementById('currentUser').textContent = `${selectedUserType === 'admin' ? '👨‍💼' : '👨‍🎓'} ${userName} (${selectedUserType.toUpperCase()})`;
                    
                    // Hide admin controls for students
                    if (selectedUserType === 'siswa') {
                        document.getElementById('adminControls').style.display = 'none';
                        document.getElementById('printAllBtn').style.display = 'none';
                        
                        // Update table header for students - only show Nama and Status
                        document.getElementById('tableHeader').innerHTML = `
                            <tr>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nama</th>
                                <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            </tr>
                        `;
                    }
                    
                    // Load members data
                    loadData();
                } else {
                    showError('Username atau password salah!');
                }
            } catch (error) {
                showError('Terjadi kesalahan saat login. Silakan coba lagi.');
                console.error('Login error:', error);
            } finally {
                loginBtn.disabled = false;
                loginBtn.textContent = '🔐 Login';
                showLoading(false);
            }
        });



        // Logout handler
        document.getElementById('logoutBtn').addEventListener('click', function() {
            if (confirm('Yakin ingin logout?')) {
                currentUserData = null;
                userType = null;
                document.getElementById('mainApp').classList.add('hidden');
                document.getElementById('loginScreen').classList.remove('hidden');
                
                // Reset form
                document.getElementById('loginForm').reset();
                document.getElementById('loginError').classList.add('hidden');
            }
        });

        // Load data from Google Sheets
        async function loadData() {
            try {
                const response = await fetch(csvUrl);
                const csvData = await response.text();
                membersData = parseCSV(csvData);
                
                // Filter data for students - only show their own card
                if (userType === 'siswa') {
                    const currentUserName = currentUserData.nama || currentUserData.Nama || currentUserData.name || currentUserData.Name || '';
                    membersData = membersData.filter(member => {
                        const memberName = member.Nama || member.Name || '';
                        return memberName.toLowerCase().includes(currentUserName.toLowerCase()) || 
                               currentUserName.toLowerCase().includes(memberName.toLowerCase());
                    });
                    
                    // If no exact match found, try to find by any field similarity
                    if (membersData.length === 0) {
                        const allMembers = parseCSV(csvData);
                        const userFields = Object.values(currentUserData).join(' ').toLowerCase();
                        membersData = allMembers.filter(member => {
                            const memberFields = Object.values(member).join(' ').toLowerCase();
                            return userFields.includes(memberFields.split(' ')[0]) || 
                                   memberFields.includes(userFields.split(' ')[0]);
                        });
                    }
                }
                
                populateSelect();
                populateTable();
                
                if (membersData.length > 0) {
                    updateCard(membersData[0]);
                    
                    // For students, auto-select their card
                    if (userType === 'siswa') {
                        document.getElementById('memberSelect').value = '0';
                    }
                }
            } catch (error) {
                console.error('Error loading data:', error);
                document.getElementById('memberSelect').innerHTML = '<option value="">Error memuat data</option>';
                document.getElementById('dataTable').innerHTML = '<tr><td colspan="5" class="px-4 py-8 text-center text-red-500">Gagal memuat data dari Google Sheets</td></tr>';
            }
        }

        // Populate select dropdown
        function populateSelect() {
            const select = document.getElementById('memberSelect');
            select.innerHTML = '<option value="">Pilih anggota...</option>';
            
            membersData.forEach((member, index) => {
                const option = document.createElement('option');
                option.value = index;
                
                // For students, only show their own name without ID for privacy
                if (userType === 'siswa') {
                    option.textContent = `${member.Nama || member.Name || 'Nama tidak tersedia'}`;
                } else {
                    // For admin, show full details
                    option.textContent = `${member.Nama || member.Name || 'Nama tidak tersedia'} - ${member.ID || member.id || 'ID tidak tersedia'}`;
                }
                
                select.appendChild(option);
            });
        }

        // Populate data table
        function populateTable() {
            const tbody = document.getElementById('dataTable');
            tbody.innerHTML = '';

            if (membersData.length === 0) {
                if (userType === 'siswa') {
                    tbody.innerHTML = '<tr><td colspan="2" class="px-4 py-8 text-center text-gray-500">Data kartu pustaka Anda tidak ditemukan</td></tr>';
                } else {
                    tbody.innerHTML = '<tr><td colspan="5" class="px-4 py-8 text-center text-gray-500">Tidak ada data</td></tr>';
                }
                return;
            }

            membersData.forEach(member => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50';
                
                const name = member.Nama || member.Name || 'N/A';
                const id = member.ID || member.id || 'N/A';
                const kelas = member.Kelas || member.Class || member.Grade || 'N/A';
                const email = member.Email || member.email || 'N/A';
                const status = member.Status || member.status || 'Aktif';
                
                // For students, show only name and status
                if (userType === 'siswa') {
                    row.innerHTML = `
                        <td class="px-4 py-3 text-sm text-gray-900">${name}</td>
                        <td class="px-4 py-3">
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${status.toLowerCase() === 'aktif' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                                ${status}
                            </span>
                        </td>
                    `;
                } else {
                    // For admin, show all data normally
                    row.innerHTML = `
                        <td class="px-4 py-3 text-sm text-gray-900">${name}</td>
                        <td class="px-4 py-3 text-sm font-mono text-gray-900">${id}</td>
                        <td class="px-4 py-3 text-sm text-gray-900">${kelas}</td>
                        <td class="px-4 py-3 text-sm text-gray-900">${email}</td>
                        <td class="px-4 py-3">
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${status.toLowerCase() === 'aktif' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                                ${status}
                            </span>
                        </td>
                    `;
                }
                tbody.appendChild(row);
            });
        }

        // Update library card
        function updateCard(member) {
            if (!member) return;

            const name = member.Nama || member.Name || 'Nama tidak tersedia';
            const id = member.ID || member.id || 'ID tidak tersedia';
            const kelas = member.Kelas || member.Class || member.Grade || 'Kelas tidak tersedia';
            
            document.getElementById('memberName').textContent = name;
            document.getElementById('memberId').textContent = id;
            document.getElementById('memberClass').textContent = kelas;
            
            // Set expiry date (1 year from now)
            const expiryDate = new Date();
            expiryDate.setFullYear(expiryDate.getFullYear() + 1);
            document.getElementById('expiryDate').textContent = expiryDate.toLocaleDateString('id-ID');

            // Generate barcode
            const barcodeElement = document.getElementById('barcode');
            barcodeElement.innerHTML = '';
            
            try {
                JsBarcode(barcodeElement, id, {
                    format: "CODE128",
                    width: 1.5,
                    height: 40,
                    displayValue: false,
                    margin: 0
                });
            } catch (error) {
                console.error('Error generating barcode:', error);
                barcodeElement.innerHTML = '<text x="50%" y="50%" text-anchor="middle" fill="#666" font-size="8">Barcode Error</text>';
            }
        }

        // Event listeners
        document.getElementById('memberSelect').addEventListener('change', function() {
            const selectedIndex = this.value;
            if (selectedIndex !== '') {
                updateCard(membersData[selectedIndex]);
            }
        });

        document.getElementById('refreshBtn').addEventListener('click', function() {
            this.textContent = '🔄 Memuat...';
            this.disabled = true;
            
            loadData().finally(() => {
                this.textContent = '🔄 Refresh Data';
                this.disabled = false;
            });
        });

        document.getElementById('setPathBtn').addEventListener('click', function() {
            const pathInput = document.getElementById('downloadPath');
            downloadPath = pathInput.value;
            
            // Save to localStorage
            localStorage.setItem('kartuPustakaDownloadPath', downloadPath);
            
            // Show confirmation
            this.textContent = '✅ Tersimpan';
            setTimeout(() => {
                this.textContent = '💾 Set Path';
            }, 2000);
        });

        // Load saved path on page load
        window.addEventListener('load', function() {
            const savedPath = localStorage.getItem('kartuPustakaDownloadPath');
            if (savedPath) {
                downloadPath = savedPath;
                document.getElementById('downloadPath').value = savedPath;
            }
        });

        // Function to create a single card element
        async function createCardElement(member) {
            const tempCard = document.createElement('div');
            tempCard.className = 'print-card';
            tempCard.style.position = 'absolute';
            tempCard.style.left = '-9999px';
            tempCard.style.top = '0';
            
            tempCard.innerHTML = `
                <div class="card-header-print">
                    <div style="display: flex; align-items: center; justify-content: space-between;">
                        <div>
                            <h2 style="font-size: 18px; font-weight: bold; margin: 0; line-height: 1.2;">PERPUSTAKAAN</h2>
                            <p style="font-size: 11px; opacity: 0.9; margin: 0;">SMA NEGERI 1 DARUSSALAM</p>
                            <p style="font-size: 10px; opacity: 0.8; margin: 0;">Library Card</p>
                        </div>
                        <div style="font-size: 24px;">📚</div>
                    </div>
                </div>
                <div class="card-body-print">
                    <div style="display: flex; height: 100%;">
                        <div style="flex: 1; padding-right: 12px;">
                            <div style="margin-bottom: 8px;">
                                <p style="font-size: 10px; color: #6b7280; text-transform: uppercase; letter-spacing: 0.05em; margin: 0;">Nama</p>
                                <p style="font-weight: 600; color: #1f2937; font-size: 14px; margin: 2px 0 0 0;">${member.Nama || member.Name || '-'}</p>
                            </div>
                            <div style="margin-bottom: 8px;">
                                <p style="font-size: 10px; color: #6b7280; text-transform: uppercase; letter-spacing: 0.05em; margin: 0;">ID Anggota</p>
                                <p style="font-family: monospace; font-size: 14px; color: #1f2937; margin: 2px 0 0 0;">${member.ID || member.id || '-'}</p>
                            </div>
                            <div style="margin-bottom: 8px;">
                                <p style="font-size: 10px; color: #6b7280; text-transform: uppercase; letter-spacing: 0.05em; margin: 0;">Kelas</p>
                                <p style="font-size: 14px; color: #1f2937; margin: 2px 0 0 0;">${member.Kelas || member.Class || member.Grade || '-'}</p>
                            </div>
                            <div>
                                <p style="font-size: 10px; color: #6b7280; text-transform: uppercase; letter-spacing: 0.05em; margin: 0;">Berlaku Hingga</p>
                                <p style="font-size: 14px; color: #1f2937; margin: 2px 0 0 0;">${new Date(Date.now() + 365*24*60*60*1000).toLocaleDateString('id-ID')}</p>
                            </div>
                        </div>
                        <div style="width: 96px; display: flex; flex-direction: column; align-items: center; justify-content: center;">
                            <svg class="temp-barcode" style="margin-bottom: 4px;"></svg>
                            <p style="font-size: 10px; color: #6b7280; text-align: center; margin: 0;">Scan untuk akses</p>
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(tempCard);

            // Generate barcode for temp card
            const tempBarcodeElement = tempCard.querySelector('.temp-barcode');
            const memberId = member.ID || member.id || '000000';
            
            JsBarcode(tempBarcodeElement, memberId, {
                format: "CODE128",
                width: 1.5,
                height: 40,
                displayValue: false,
                margin: 0
            });

            // Wait a bit for barcode to render
            await new Promise(resolve => setTimeout(resolve, 100));

            return tempCard;
        }

        document.getElementById('printBtn').addEventListener('click', async function() {
            const selectedIndex = document.getElementById('memberSelect').value;
            if (selectedIndex === '') {
                alert('Silakan pilih anggota terlebih dahulu!');
                return;
            }

            const member = membersData[selectedIndex];
            const name = member.Nama || member.Name || 'Nama tidak tersedia';
            const memberId = member.ID || member.id || 'ID tidak tersedia';
            
            this.textContent = '📄 Membuat PDF...';
            this.disabled = true;

            try {
                const tempCard = await createCardElement(member);

                // Generate PDF using html2canvas and jsPDF
                const canvas = await html2canvas(tempCard, {
                    scale: 3,
                    backgroundColor: '#ffffff',
                    useCORS: true,
                    allowTaint: true
                });

                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF({
                    orientation: 'landscape',
                    unit: 'mm',
                    format: [85.6, 53.98] // Standard credit card size
                });

                const imgData = canvas.toDataURL('image/png');
                pdf.addImage(imgData, 'PNG', 0, 0, 85.6, 53.98);

                // Clean up temp element
                document.body.removeChild(tempCard);

                // Create blob and download link
                const pdfBlob = pdf.output('blob');
                const url = URL.createObjectURL(pdfBlob);
                
                // Create download link and trigger download
                const downloadLink = document.createElement('a');
                downloadLink.href = url;
                const fileName = `[${downloadPath.replace(/\\/g, '_')}]_Kartu_Pustaka_${name.replace(/\s+/g, '_')}.pdf`;
                downloadLink.download = fileName;
                downloadLink.style.display = 'none';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
                
                // Clean up URL
                setTimeout(() => URL.revokeObjectURL(url), 1000);

                // Log print activity
                await logPrintActivity(name, memberId, 'single');
                
                // Show success message
                if (userType === 'siswa') {
                    alert(`✅ Kartu pustaka Anda berhasil dicetak!\n\nNama: ${name}\nID: ${memberId}\n\nAktivitas pencetakan telah dicatat dalam sistem.`);
                }

            } catch (error) {
                console.error('Error generating PDF:', error);
                alert('Terjadi kesalahan saat membuat PDF. Silakan coba lagi.');
            } finally {
                this.textContent = '📄 Cetak PDF';
                this.disabled = false;
            }
        });

        document.getElementById('printAllBtn').addEventListener('click', async function() {
            if (membersData.length === 0) {
                alert('Tidak ada data anggota untuk dicetak!');
                return;
            }

            this.textContent = '📚 Membuat PDF Semua...';
            this.disabled = true;

            try {
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF({
                    orientation: 'landscape',
                    unit: 'mm',
                    format: 'a4'
                });

                // Calculate how many cards can fit per page (2x5 = 10 cards per page)
                const cardWidth = 85.6;
                const cardHeight = 53.98;
                const margin = 5;
                const cardsPerRow = 2;
                const cardsPerCol = 5;
                const cardsPerPage = cardsPerRow * cardsPerCol;

                let cardCount = 0;
                let pageCount = 0;
                let printedMembers = [];

                for (let i = 0; i < membersData.length; i++) {
                    const member = membersData[i];
                    
                    // Add new page if needed
                    if (cardCount % cardsPerPage === 0 && cardCount > 0) {
                        pdf.addPage();
                        pageCount++;
                    }

                    // Create progress indicator
                    this.textContent = `📚 Membuat PDF... (${i + 1}/${membersData.length})`;

                    const tempCard = await createCardElement(member);

                    // Generate canvas for this card
                    const canvas = await html2canvas(tempCard, {
                        scale: 3,
                        backgroundColor: '#ffffff',
                        useCORS: true,
                        allowTaint: true
                    });

                    // Calculate position on page
                    const row = Math.floor((cardCount % cardsPerPage) / cardsPerRow);
                    const col = (cardCount % cardsPerPage) % cardsPerRow;
                    
                    const x = margin + col * (cardWidth + margin);
                    const y = margin + row * (cardHeight + margin);

                    const imgData = canvas.toDataURL('image/png');
                    pdf.addImage(imgData, 'PNG', x, y, cardWidth, cardHeight);

                    // Clean up temp element
                    document.body.removeChild(tempCard);

                    // Track printed members for logging
                    printedMembers.push({
                        name: member.Nama || member.Name || 'Nama tidak tersedia',
                        id: member.ID || member.id || 'ID tidak tersedia'
                    });

                    cardCount++;

                    // Small delay to prevent browser freezing
                    if (i % 5 === 0) {
                        await new Promise(resolve => setTimeout(resolve, 50));
                    }
                }

                // Create blob and download link for all cards
                const pdfBlob = pdf.output('blob');
                const url = URL.createObjectURL(pdfBlob);
                
                // Create download link and trigger download
                const downloadLink = document.createElement('a');
                downloadLink.href = url;
                const fileName = `[${downloadPath.replace(/\\/g, '_')}]_Semua_Kartu_Pustaka_${new Date().toISOString().split('T')[0]}.pdf`;
                downloadLink.download = fileName;
                downloadLink.style.display = 'none';
                document.body.appendChild(downloadLink);
                downloadLink.click();
                document.body.removeChild(downloadLink);
                
                // Clean up URL
                setTimeout(() => URL.revokeObjectURL(url), 1000);

                // Log print activity for all members
                for (const member of printedMembers) {
                    await logPrintActivity(member.name, member.id, 'batch');
                }

                alert(`✅ Berhasil membuat ${membersData.length} kartu pustaka dalam 1 file PDF!\n\nSemua aktivitas pencetakan telah dicatat dalam sistem.`);

            } catch (error) {
                console.error('Error generating all PDFs:', error);
                alert('Terjadi kesalahan saat membuat PDF semua kartu. Silakan coba lagi.');
            } finally {
                this.textContent = '📚 Cetak Semua';
                this.disabled = false;
            }
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'97dde25f72bf8342',t:'MTc1NzY2NDE2NC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>

